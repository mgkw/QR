#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฑูุฒูุฉ - PostgreSQL
"""

import os
import sys
import psycopg2
from psycopg2 import sql
import subprocess

def check_psycopg2():
    """ุงูุชุญูู ูู ุชุซุจูุช psycopg2"""
    try:
        import psycopg2
        print("โ psycopg2 ูุชููุฑ")
        return True
    except ImportError:
        print("โ psycopg2 ุบูุฑ ูุซุจุช")
        print("๐ง ุฌุงุฑู ุงูุชุซุจูุช...")
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'psycopg2-binary'])
            print("โ ุชู ุชุซุจูุช psycopg2 ุจูุฌุงุญ")
            return True
        except subprocess.CalledProcessError:
            print("โ ูุดู ูู ุชุซุจูุช psycopg2")
            return False

def test_database_connection(database_url):
    """ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    try:
        print(f"๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู: {database_url[:50]}...")
        conn = psycopg2.connect(database_url, sslmode='require')
        cursor = conn.cursor()
        cursor.execute('SELECT version()')
        version = cursor.fetchone()
        print(f"โ ูุฌุญ ุงูุงุชุตุงู! PostgreSQL {version[0][:20]}...")
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"โ ูุดู ุงูุงุชุตุงู: {e}")
        return False

def create_tables(database_url):
    """ุฅูุดุงุก ุงูุฌุฏุงูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    try:
        conn = psycopg2.connect(database_url, sslmode='require')
        cursor = conn.cursor()
        
        print("๐ ุฅูุดุงุก ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...")
        
        # ุฌุฏูู ุงููุณุชุฎุฏููู
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                username VARCHAR(255) UNIQUE NOT NULL,
                password_hash TEXT,
                is_owner BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_by VARCHAR(255),
                last_login TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        print("โ ุชู ุฅูุดุงุก ุฌุฏูู users")
        
        # ุฌุฏูู ุงููุณุญุงุช
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS scans (
                id VARCHAR(36) PRIMARY KEY,
                barcode TEXT NOT NULL,
                code_type VARCHAR(50) DEFAULT 'ููุฏ',
                user_id INTEGER NOT NULL,
                username VARCHAR(255) NOT NULL,
                image_data_url TEXT,
                scan_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                telegram_status VARCHAR(20) DEFAULT 'pending',
                telegram_attempts INTEGER DEFAULT 0,
                telegram_last_attempt TIMESTAMP,
                telegram_error TEXT,
                is_duplicate BOOLEAN DEFAULT FALSE,
                duplicate_count INTEGER DEFAULT 1,
                baghdad_time TEXT,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        print("โ ุชู ุฅูุดุงุก ุฌุฏูู scans")
        
        # ุฌุฏูู ุงูุฅุนุฏุงุฏุงุช
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS settings (
                id SERIAL PRIMARY KEY,
                key VARCHAR(255) UNIQUE NOT NULL,
                value TEXT,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_by VARCHAR(255)
            )
        ''')
        print("โ ุชู ุฅูุดุงุก ุฌุฏูู settings")
        
        # ุฌุฏูู ุฌูุณุงุช ุงููุณุชุฎุฏููู
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_sessions (
                id VARCHAR(36) PRIMARY KEY,
                user_id INTEGER NOT NULL,
                username VARCHAR(255) NOT NULL,
                is_owner BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP NOT NULL,
                is_remember_me BOOLEAN DEFAULT FALSE,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        print("โ ุชู ุฅูุดุงุก ุฌุฏูู user_sessions")
        
        conn.commit()
        cursor.close()
        conn.close()
        print("๐ ุชู ุฅูุดุงุก ุฌููุน ุงูุฌุฏุงูู ุจูุฌุงุญ!")
        return True
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุฌุฏุงูู: {e}")
        return False

def create_default_data(database_url):
    """ุฅูุดุงุก ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ"""
    try:
        from werkzeug.security import generate_password_hash
        
        conn = psycopg2.connect(database_url, sslmode='require')
        cursor = conn.cursor()
        
        print("๐ค ุฅูุดุงุก ุงููุณุชุฎุฏููู ุงูุงูุชุฑุงุถููู...")
        
        # ุงูุชุญูู ูู ูุฌูุฏ ุงููุณุชุฎุฏู admin
        cursor.execute('SELECT id FROM users WHERE username = %s', ['admin'])
        if not cursor.fetchone():
            # ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุฃููุฑ
            password_hash = generate_password_hash('owner123')
            cursor.execute('''
                INSERT INTO users (username, password_hash, is_owner, created_by)
                VALUES (%s, %s, TRUE, 'system')
            ''', ['admin', password_hash])
            print("โ ุชู ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุฃููุฑ: admin")
        
        # ุงูุชุญูู ูู ูุฌูุฏ ุงููุณุชุฎุฏู test
        cursor.execute('SELECT id FROM users WHERE username = %s', ['test'])
        if not cursor.fetchone():
            # ุฅูุดุงุก ูุณุชุฎุฏู ุชุฌุฑูุจู
            cursor.execute('''
                INSERT INTO users (username, created_by)
                VALUES (%s, 'system')
            ''', ['test'])
            print("โ ุชู ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุชุฌุฑูุจู: test")
        
        # ุฅูุดุงุก ุงูุฅุนุฏุงุฏุงุช ุงูุงูุชุฑุงุถูุฉ
        print("โ๏ธ ุฅูุดุงุก ุงูุฅุนุฏุงุฏุงุช ุงูุงูุชุฑุงุถูุฉ...")
        default_settings = [
            ('telegram_bot_token', ''),
            ('telegram_chat_id', ''),
            ('auto_send_telegram', 'false'),
            ('duplicate_detection_seconds', '20'),
            ('database_type', 'postgresql')
        ]
        
        for key, value in default_settings:
            cursor.execute('SELECT id FROM settings WHERE key = %s', [key])
            if not cursor.fetchone():
                cursor.execute('''
                    INSERT INTO settings (key, value, updated_by)
                    VALUES (%s, %s, 'system')
                ''', [key, value])
        
        print("โ ุชู ุฅูุดุงุก ุงูุฅุนุฏุงุฏุงุช ุงูุงูุชุฑุงุถูุฉ")
        
        conn.commit()
        cursor.close()
        conn.close()
        print("๐ ุชู ุฅูุดุงุก ุฌููุน ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ!")
        return True
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ: {e}")
        return False

def main():
    print("๐๏ธ ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฑูุฒูุฉ")
    print("=" * 40)
    
    # ุงูุชุญูู ูู psycopg2
    if not check_psycopg2():
        print("โ ูุง ูููู ูุชุงุจุนุฉ ุงูุฅุนุฏุงุฏ ุจุฏูู psycopg2")
        sys.exit(1)
    
    # ุงูุญุตูู ุนูู ุฑุงุจุท ูุงุนุฏุฉ ุงูุจูุงูุงุช
    database_url = os.environ.get('DATABASE_URL')
    
    if not database_url:
        print("โ ูุชุบูุฑ DATABASE_URL ุบูุฑ ููุฌูุฏ")
        print("\n๐ง ูุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช:")
        print("1. ุฃูุดุฆ ุญุณุงุจ ูู https://supabase.com")
        print("2. ุฃูุดุฆ ูุดุฑูุน ุฌุฏูุฏ")
        print("3. ุงุฐูุจ ุฅูู Settings > Database")
        print("4. ุงูุณุฎ Connection String")
        print("5. ูู ุจุชุดุบูู:")
        print("   export DATABASE_URL='your_connection_string_here'")
        print("   python setup_database.py")
        return
    
    # ุงุฎุชุจุงุฑ ุงูุงุชุตุงู
    if not test_database_connection(database_url):
        print("โ ูุง ูููู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช")
        print("๐ง ุชุฃูุฏ ูู ุตุญุฉ ุฑุงุจุท ูุงุนุฏุฉ ุงูุจูุงูุงุช")
        return
    
    # ุฅูุดุงุก ุงูุฌุฏุงูู
    if not create_tables(database_url):
        print("โ ูุดู ูู ุฅูุดุงุก ุงูุฌุฏุงูู")
        return
    
    # ุฅูุดุงุก ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ
    if not create_default_data(database_url):
        print("โ ูุดู ูู ุฅูุดุงุก ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ")
        return
    
    print("\n๐ ุชู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!")
    print("๐ ููููู ุงูุขู ุชุดุบูู ุงูุชุทุจูู:")
    print("   python app.py")
    print("\n๐ฅ ุงููุณุชุฎุฏููู ุงูุงูุชุฑุงุถููู:")
    print("   ุงูุฃููุฑ: admin / owner123")
    print("   ุชุฌุฑูุจู: test (ุจุฏูู ูููุฉ ูุฑูุฑ)")

if __name__ == '__main__':
    main() 